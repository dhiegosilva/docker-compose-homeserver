version: "3.9"

volumes:
  metadata_data: { }
  middle_var: { }
  historical_var: { }
  broker_var: { }
  coordinator_var: { }
  router_var: { }
  druid_shared: { }
  zk-data: { }
  zk-txns: { }
  zk-logs: { }
  kafka-data: { }
  kafka-logs: { }

services:

  watchtower:
    image: containrrr/watchtower:latest
    restart: unless-stopped
    container_name: watchtower
    command: --interval 30 metabase mqtt openhab postgreSQL pgadmin4 zookeeper watchtower
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/timezone:/etc/timezone:ro
    ports:
      - "5555:8080"


  portainer:
    image: portainer/portainer-ce:linux-amd64
    restart: unless-stopped
    container_name: portainer
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./portainer_data:/data"
    ports:
      - "3001:9000"


  openhab:
    image: openhab/openhab:latest
    container_name: openhab
    restart: unless-stopped
    network_mode: host
    environment:
      CRYPTO_POLICY: "unlimited"
      EXTRA_JAVA_OPTS: "-Duser.timezone=Europe/Berlin"
      OPENHAB_HTTP_PORT: "8080"
      OPENHAB_HTTPS_PORT: "8443"
    volumes:
      - ./openhab/openhab_addons:/openhab/addons
      - ./openhab/openhab_conf:/openhab/conf
      - ./openhab/openhab_userdata:/openhab/userdata
    privileged: true

  mosquitto:
    container_name: mqtt
    image: eclipse-mosquitto:latest
    restart: unless-stopped
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    ports:
      - 1883:1883
      - 8883:8883
      - 9001:9001

  metabase:
    container_name: metabase
    image: metabase/metabase:latest
    restart: unless-stopped
    depends_on:
      - postgreSQL
    environment:
      MB_SITE_LOCALE: de
      MB_START_OF_WEEK: monday
      TZ: Europe/Berlin
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: dhiego
      MB_DB_PASS: f4x4d8p6
      #      MB_DB_HOST: dhiego-server
      MB_DB_HOST: 192.168.0.164
    ports:
      - "3000:3000"

  postgres-pgadmin4:
    image: dpage/pgadmin4:latest
    container_name: pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: dhiego.silva@hotmail.com
      PGADMIN_DEFAULT_PASSWORD: f4x4d8p6
      TZ: Europe/Berlin
    #      LDAP_AUTO_CREATE_USER: True
    #      LDAP_SERVER_URI: ldap://10.1.200.102:389
    #      LDAP_BIND_PASSWORD: 3cpGUdJFVJTHAGR2muUc
    #      LDAP_SEARCH_BASE_DN: OU=FRANKFURT,OU=USERS,OU=DEGUSSA,DC=degussa,DC=local
    #      LDAP_SEARCH_FILTER: (&(userPrincipalName={login}))
    #      LDAP_USERNAME_ATTRIBUTE: userPrincipalName
    #      LDAP_CONNECTION_TIMEOUT: 10
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    ports:
      - '3002:80'

  postgreSQL:
    image: postgres:16-alpine
    container_name: postgreSQL
    volumes:
      - ./postgres/postgresDATA:/var/lib/postgresql/data
    restart: unless-stopped
    command: [ "-c", "shared_buffers=3GB", "-c", "max_connections=200", "-c", "work_mem=1GB", "-c", "random_page_cost=1.1", "-c", "effective_io_concurrency=200", "-c", "wal_buffers=128MB", "-c", "wal_level=logical" ]
    environment:
      POSTGRES_INITDB_ARGS: '--locale-provider=icu --icu-locale=de-DE'
      TZ: Europe/Berlin
      PGTZ: Europe/Berlin
      POSTGRES_DB: metabase
      POSTGRES_USER: dhiego
      POSTGRES_PASSWORD: f4x4d8p6
    ports:
      - '5432:5432'

  zookeeper:
    container_name: zookeeper
    image: zookeeper:latest
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      - ZOO_MY_ID=1

  coordinator:
    image: apache/druid:27.0.0
    container_name: coordinator
    restart: unless-stopped

    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgreSQL
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - environment

  broker:
    image: apache/druid:27.0.0
    container_name: broker
    restart: unless-stopped

    volumes:
      - broker_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgreSQL
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - environment

  historical:
    image: apache/druid:27.0.0
    container_name: historical
    restart: unless-stopped

    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgreSQL
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - environment

  middlemanager:
    image: apache/druid:27.0.0
    container_name: middlemanager
    restart: unless-stopped

    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgreSQL
      - coordinator
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - environment

  router:
    image: apache/druid:27.0.0
    container_name: router
    restart: unless-stopped

    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgreSQL
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - environment

  kafka:
    image: debezium/kafka:latest
    restart: unless-stopped
    ports:
      - "9094:9094"
    links:
      - zookeeper
    environment:
      # Set the KAFKA_ADVERTISED_HOST_NAME to your laptop/work computer's hostname during development
      - "KAFKA_ADVERTISED_HOST_NAME=192.168.0.164"
      - "ZOOKEEPER_CONNECT=zookeeper:2181"
      - "KAFKA_ADVERTISED_LISTENERS=INSIDE://:9092,OUTSIDE://192.168.0.164:9094"
      - "KAFKA_LISTENERS=INSIDE://:9092,OUTSIDE://:9094"
      - "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
      - "KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE"
    volumes:
      - kafka-data:/kafka/data:rw
      - kafka-logs:/kafka/logs:rw

  connect:
    image: debezium/connect:latest
    restart: unless-stopped
    ports:
      - "8043:8043"
    links:
      - kafka
      - apicurio-registry
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - ENABLE_APICURIO_CONVERTERS=true
      - STATUS_STORAGE_TOPIC=my_connect_statuses

  # AKHQ, a Kafka UI, From https://github.com/tchiotludo/akhq/blob/dev/docker-compose.yml
  akhq:
    image: tchiotludo/akhq
    restart: unless-stopped
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://apicurio-registry:8085/apis/registry/v2"
              connect:
                - name: "connect"
                  url: "http://connect:8043"
    ports:
      - "8084:8080"
    links:
      - kafka
      - connect

  apicurio-registry:
    image: apicurio/apicurio-registry-sql:latest-release
    hostname: apicurio-registry
    restart: unless-stopped
    depends_on:
      - postgreSQL
    ports:
      - "8085:8080"
    environment:
      - "REGISTRY_DATASOURCE_URL=jdbc:postgresql://192.168.0.164:5432/apicurio-registry"
      - "REGISTRY_DATASOURCE_USERNAME=dhiego"
      - "REGISTRY_DATASOURCE_PASSWORD=f4x4d8p6"