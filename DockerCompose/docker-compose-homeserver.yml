volumes:
  middle_var: { }
  historical_var: { }
  broker_var: { }
  coordinator_var: { }
  router_var: { }
  druid_shared: { }


services:

  watchtower:
    image: containrrr/watchtower:latest
    restart: unless-stopped
    container_name: watchtower
    command: --interval 30 metabase mqtt openhab postgres pgadmin4 zookeeper watchtower
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/timezone:/etc/timezone:ro
    ports:
      - "5555:8080"


  portainer:
    image: portainer/portainer-ce:linux-amd64
    restart: unless-stopped
    container_name: portainer
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./portainer_data:/data"
    ports:
      - "3001:9000"


  openhab:
    image: openhab/openhab:latest
    container_name: openhab
    restart: unless-stopped
    network_mode: host
    environment:
      CRYPTO_POLICY: "unlimited"
      EXTRA_JAVA_OPTS: "-Duser.timezone=Europe/Berlin"
      OPENHAB_HTTP_PORT: "8080"
      OPENHAB_HTTPS_PORT: "8443"
    volumes:
      - ./openhab/openhab_addons:/openhab/addons
      - ./openhab/openhab_conf:/openhab/conf
      - ./openhab/openhab_userdata:/openhab/userdata
    privileged: true

  mosquitto:
    container_name: mqtt
    image: eclipse-mosquitto:latest
    restart: unless-stopped
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    ports:
      - "1883:1883"
      - "8883:8883"
      - "9001:9001"

  metabase:
    container_name: metabase
    image: metabase/metabase:latest
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      MB_SITE_LOCALE: de
      MB_START_OF_WEEK: monday
      TZ: Europe/Berlin
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: dhiego
      MB_DB_PASS: f4x4d8p6
      #      MB_DB_HOST: dhiego-server
      MB_DB_HOST: 192.168.0.164
    ports:
      - "3000:3000"

  postgres-pgadmin4:
    image: dpage/pgadmin4:latest
    container_name: pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: dhiego.silva@hotmail.com
      PGADMIN_DEFAULT_PASSWORD: f4x4d8p6
      TZ: Europe/Berlin
    #      LDAP_AUTO_CREATE_USER: True
    #      LDAP_SERVER_URI: ldap://10.1.200.102:389
    #      LDAP_BIND_PASSWORD: 3cpGUdJFVJTHAGR2muUc
    #      LDAP_SEARCH_BASE_DN: OU=FRANKFURT,OU=USERS,OU=DEGUSSA,DC=degussa,DC=local
    #      LDAP_SEARCH_FILTER: (&(userPrincipalName={login}))
    #      LDAP_USERNAME_ATTRIBUTE: userPrincipalName
    #      LDAP_CONNECTION_TIMEOUT: 10
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    ports:
      - '3002:80'

  postgres:
    image: debezium/postgres:16-alpine
    container_name: postgres
    volumes:
      - ./postgres/postgresDATA:/var/lib/postgresql/data
    restart: unless-stopped
    #    command: [ "-c", "shared_buffers=3GB", "-c", "max_connections=1000", "-c", "work_mem=1GB", "-c", "random_page_cost=1.1", "-c", "effective_io_concurrency=200", "-c", "wal_buffers=128MB", "-c", "wal_level=logical" ]
    command: [ "-c", "max_connections=1000", "-c", "random_page_cost=1.1", "-c", "effective_io_concurrency=200", "-c", "wal_level=logical" ]
    healthcheck:
      test: [ 'CMD', 'psql', '-U', 'dhiego',"-d", "metabase", '-c', 'SELECT 1' ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_INITDB_ARGS: '--locale-provider=icu --icu-locale=de-DE'
      TZ: Europe/Berlin
      PGTZ: Europe/Berlin
      POSTGRES_DB: metabase
      POSTGRES_USER: dhiego
      POSTGRES_PASSWORD: f4x4d8p6
    ports:
      - '5432:5432'

  zookeeper:
    container_name: zookeeper
    image: zookeeper:latest
    restart: unless-stopped
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    environment:
      - ZOO_MY_ID=1

  coordinator:
    image: apache/druid:27.0.0
    container_name: coordinator
    restart: unless-stopped

    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
    ports:
      - "7081:8081"
    command:
      - coordinator
    env_file:
      - environment

  brokerdruid:
    image: apache/druid:27.0.0
    container_name: brokerdruid
    restart: unless-stopped

    volumes:
      - broker_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "7082:8082"
    command:
      - broker
    env_file:
      - environment

  historical:
    image: apache/druid:27.0.0
    container_name: historical
    restart: unless-stopped

    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "7083:8083"
    command:
      - historical
    env_file:
      - environment

  middlemanager:
    image: apache/druid:27.0.0
    container_name: middlemanager
    restart: unless-stopped

    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "7091:8091"
      - "7100-7105:8100-8105"
    command:
      - middleManager
    env_file:
      - environment

  router:
    image: apache/druid:27.0.0
    container_name: router
    restart: unless-stopped

    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - environment

  ###############################################################################################################################
  ####################Kafka

  broker:
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '29092:29092'
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  debezium:
    image: debezium/connect:2.4
    restart: always
    container_name: debezium
    hostname: debezium
    depends_on:
      postgres:
        condition: service_healthy
      broker:
        condition: service_healthy
    ports:
      - '8083:8083'
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      STATUS_STORAGE_TOPIC: connect_statuses
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: 'true'
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--silent',
          '--fail',
          '-X',
          'GET',
          'http://localhost:8083/connectors',
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --user superUser:superUser --fail --silent --insecure http://localhost:8081/subjects --output /dev/null || exit 1

  rest-proxy:
    image: confluentinc/cp-kafka-rest:latest
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - '8082:8082'
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'

  debezium-ui:
    image: debezium/debezium-ui:2.4
#    restart: always
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      debezium:
        condition: service_healthy
    ports:
      - '3003:8080'
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
